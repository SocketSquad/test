name: Tests

on:
  pull_request:
    branches: [ "main", "develop" ]
  push:
    branches: [ "main", "develop" ]

permissions:
  contents: read
  pull-requests: write # Required to post coverage comments on PRs

env:
  SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  unit-tests:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run Tests
        id: run-tests
        run: npm run test
        continue-on-error: true

      - name: Run coverage tests
        run: npm run test:cov

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true # Helps with debugging
          codecov_yml_path: codecov.yml # Path to your codecov config file

      # Generate coverage report as a PR comment
      - name: Generate Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/**/cobertura-coverage.xml
          badge: true
          format: markdown
          output: both
          indicators: true

      # Add coverage report as PR comment
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          header: test-coverage
          recreate: true
          path: code-coverage-results.md

      - name: Slack Notification on Test Success
        if: steps.run-tests.outcome == 'success'
        run: |
          message="✅ Tests Passed!"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            message="${message}\nPR: *${{github.event.pull_request.title}}*"
            message="${message}\nAuthor: *${{github.event.pull_request.user.login}}*"
            message="${message}\nLink: ${{github.event.pull_request.html_url}}"
          fi

          curl -X POST \
            -H 'Content-type: application/json' \
            -H 'Authorization: Bearer ${{ secrets.SLACK_TOKEN}}' \
            --data "{\"channel\":\"#nexus-app-back-tests\",\"text\":\"$message\"}" \
            https://slack.com/api/chat.postMessage

      - name: Slack Notification on Test Failure
        if: steps.run-tests.outcome == 'failure'
        run: |
          message="❌ Tests Failed!"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            message="${message}\nPR: *${{github.event.pull_request.title}}*"
            message="${message}\nAuthor: *${{github.event.pull_request.user.login}}*"
            message="${message}\nLink: ${{github.event.pull_request.html_url}}"
          fi
          
          curl -X POST \
            -H 'Content-type: application/json' \
            -H 'Authorization: Bearer ${{ secrets.SLACK_TOKEN}}' \
            --data "{\"channel\":\"#nexus-app-back-tests\",\"text\":\"$message\"}" \
            https://slack.com/api/chat.postMessage
  
  integration-tests:
    name: Integration Tests
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Run integration tests
        run: npm run test:e2e
      - name: Upload integration test coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          
          files: ./coverage/lcov.info
          flags: integration
          name: codecov-integration
          fail_ci_if_error: true
          verbose: true

  sonar-analysis:
    name: SonarQube Analysis
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}